{"version":3,"sources":["components/User.jsx","components/Input.jsx","components/FieldWrapper.jsx","components/Group.jsx","components/PrimaryButton.jsx","components/CloseButton.jsx","components/Section.jsx","components/Bell.jsx","components/Notes.jsx","components/Navbar.jsx","App.js","reportWebVitals.js","index.js"],"names":["User","color","opacity","width","height","viewBox","fill","xmlns","d","stroke","strokeOpacity","strokeWidth","strokeMiterlimit","strokeLinecap","strokeLinejoin","classNames","require","Input","id","input","meta","className","placeholder","wrapperClassName","labelClass","title","errorClass","form__input_errorText","form__input_errorText_first","includes","slice","type","error","touched","propTypes","PropTypes","number","object","string","required","value","FieldWrapper","isRequired","section","name","validate","subscription","active","inputClass","form__input","form__input_active","form__input_error","form__input_first","form__input_inline","form__label","form__label_error","form__label_active","inputWrapperClass","form__inputWrapper","form__inputWrapper_inline","Group","defaultGroupState","config","titles","Object","keys","map","el","general","flat","index","requiredFields","PrimaryButton","children","disabled","onClick","CloseButton","onSubmit","values","form","a","Promise","resolve","setTimeout","alert","JSON","stringify","reset","createDecorator","Section","pathname","useLocation","current","min","max","fields","useState","count","setCount","groups","Array","groupsState","setGroupState","useEffect","onAddGroup","initialValues","submitting","handleSubmit","primaryBtn","addGroupClass","closeBtnClass","restGroups","filter","onRemoveGroup","Bell","Notes","Navbar","activeClassName","to","App","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"qWAGaA,EAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,QAAT,OAChB,sBAAKC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,6BAAlE,UACI,sBAAMC,EAAE,wNAAwNC,OAAQR,GAAS,UAAWS,cAAeR,GAAW,OAAQS,YAAY,MAAMC,iBAAiB,KAAKC,cAAc,QAAQC,eAAe,UAC3W,sBAAMN,EAAE,uNAAuNC,OAAQR,GAAS,UAAWS,cAAeR,GAAW,OAAQS,YAAY,MAAMC,iBAAiB,KAAKC,cAAc,QAAQC,eAAe,cCD5WC,EAAaC,EAAQ,IAEdC,EAAQ,SAAC,GAAoF,IAAnFC,EAAkF,EAAlFA,GAAIC,EAA8E,EAA9EA,MAAOC,EAAuE,EAAvEA,KAAMC,EAAiE,EAAjEA,UAAWC,EAAsD,EAAtDA,YAAaC,EAAyC,EAAzCA,iBAAkBC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,MACpFC,EAAaX,EAAW,CAC1BY,uBAAuB,EACvBC,4BAA6BV,EAAK,IAAM,IAAMO,EAAMI,SAAS,aAEjE,OACI,sBAAKR,UAAWE,EAAhB,UACI,uBAAOF,UAAWG,EAAlB,SAA+BC,EAAMI,SAAS,WAAaJ,EAAMK,MAAM,GAAKL,IAC5E,+CAAOP,GAAIA,EAAIa,KAAK,QAAWZ,GAA/B,IAAsCE,UAAWA,EAAWC,YAAaA,KACxEF,EAAKY,OAASZ,EAAKa,SAAW,sBAAMZ,UAAWK,EAAjB,SAA8BN,EAAKY,YAK9EhC,EAAKkC,UAAY,CACbhB,GAAIiB,IAAUC,OACdjB,MAAOgB,IAAUE,OACjBjB,KAAMe,IAAUE,OAChBhB,UAAWc,IAAUG,OACrBf,iBAAkBY,IAAUG,OAC5Bd,WAAYW,IAAUE,OACtBf,YAAaa,IAAUG,OACvBrC,MAAOkC,IAAUG,OACjBpC,QAASiC,IAAUG,OACnBb,MAAOU,IAAUG,QC1BrB,IAAMvB,EAAaC,EAAQ,IAErBuB,EAAW,SAAAC,GAAK,OAAKA,EAAQ,KAAO,KAE7BC,EAAe,SAAC,GAAsC,IAArCvB,EAAoC,EAApCA,GAAIO,EAAgC,EAAhCA,MAAOiB,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,QAEjD,OACI,cAAC,IAAD,CACIC,KAAI,UAAKD,EAAL,YAAgBlB,GACpBoB,SAAUH,GAAcH,EACxBO,aAAc,CACVN,OAAO,EACPO,QAAQ,EACRf,OAAO,EACPC,SAAS,GAPjB,SAUK,YAAoB,IAAlBd,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KACA4B,EAAajC,EAAW,CAC1BkC,aAAa,EACbC,mBAAoB9B,EAAK2B,OACzBI,kBAAmB/B,EAAKY,OAASZ,EAAKa,QACtCmB,kBAAmBlC,EAAK,IAAM,IAAMO,EAAMI,SAAS,WACnDwB,oBAAoB,IAElB7B,EAAaT,EAAW,CAC1BuC,aAAa,EACbC,kBAAmBnC,EAAKY,OAASZ,EAAKa,QACtCuB,mBAAoBpC,EAAK2B,SAGvBU,EAAoB1C,EAAW,CACjC2C,oBAAoB,EACpBC,0BAHoB,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,IAGO9B,SAASX,KAEzD,OACI,mCACI,cAAC,EAAD,CACIA,GAAIA,EACJI,YAAY,cACZS,KAAK,OACLR,iBAAkBkC,EAClBpC,UAAW2B,EACXxB,WAAYA,EACZC,MAAOA,EACPN,MAAOA,EACPC,KAAMA,UC9CrBwC,EAAQ,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,kBAAmBC,EAAqB,EAArBA,OAAQnB,EAAa,EAAbA,QAExCoB,EAASC,OAAOC,KAAKJ,EAAkBlB,IAAUuB,KAAI,SAACC,GACxD,MAAW,YAAPA,EACOH,OAAOC,KAAKJ,EAAkBlB,GAASyB,SAASF,KAAI,SAAAC,GAAE,wBAAeA,MAE1E,GAAN,OAAUA,MACXE,OAEH,OACI,mCAEQN,EAAOG,KAAI,SAACC,EAAIG,GACZ,OACI,cAAC,EAAD,CAAcpD,GAAIoD,EAAO3B,QAASA,EAASlB,MAAO0C,EACpCzB,WAAYoB,EAAOS,gBAAkBT,EAAOS,eAAe1C,SAASsC,IADvBG,SChBtEE,EAAgB,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAU1C,EAAZ,EAAYA,KAAM2C,EAAlB,EAAkBA,SAAUrD,EAA5B,EAA4BA,UAAWsD,EAAvC,EAAuCA,QAAvC,OACzB,wBAAQ5C,KAAMA,EAAM2C,SAAUA,EAAUrD,UAAWA,EAAWsD,QAASA,EAAvE,SAAiFF,KCAxEG,EAAc,SAAC,GAAD,IAAE7C,EAAF,EAAEA,KAAM2C,EAAR,EAAQA,SAAUrD,EAAlB,EAAkBA,UAAWsD,EAA7B,EAA6BA,QAA7B,OACvB,wBAAQ5C,KAAMA,EAAM2C,SAAUA,EAAUrD,UAAWA,EAAWsD,QAASA,EAAvE,SACI,sBAAMtD,UAAU,aCGlBwD,EAAQ,uCAAG,WAAOC,EAAQC,GAAf,SAAAC,EAAA,sEACP,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,QADpC,OAEbE,MAAM,gBAAD,OAAiBC,KAAKC,UAAUR,GAAhC,oBACLK,WAAWJ,EAAKQ,OAHH,2CAAH,wDAORxE,GADeyE,cACFxE,EAAQ,KAGdyE,EAAU,WAAO,IACnBC,EAAYC,cAAZD,SACH7B,EAAoB,KACpBC,EAAS,KACTnB,EAAU,KAEd,OAAQ+C,GACJ,IAAK,YACD/C,EAAU,YACVkB,EAAiB,eACZlB,EAAU,CACP,UAAW,GACXyB,QAAS,CACL,UAAW,GACX,UAAW,GACX,UAAW,MAIvBN,EAAS,CACL8B,QAAS,EACTC,IAAK,EACLC,IAAK,EACLC,OAAQ,EACRxB,eAAgB,CAAC,kBAAmB,oBAExC,MAEJ,IAAK,YACD5B,EAAU,YACVkB,EAAiB,eACZlB,EAAU,CACP,UAAW,GACXyB,QAAS,CACL,UAAW,GACX,UAAW,GACX,UAAW,IAEf,UAAW,GACX,UAAW,GACX,UAAW,GACX,UAAW,KAInBN,EAAS,CACL8B,QAAS,EACTC,IAAK,EACLC,IAAK,EACLC,OAAQ,GAEZ,MAEJ,IAAK,YACDpD,EAAU,YACVkB,EAAiB,eACZlB,EAAU,CACP,UAAW,GACXyB,QAAS,CACL,UAAW,GACX,UAAW,GACX,UAAW,IAEf,UAAW,GACX,UAAW,GACX,UAAW,GACX,UAAW,GACX,UAAW,GACX,WAAY,GACZ,WAAY,GACZ,WAAY,KAIpBN,EAAS,CACL8B,QAAS,EACTC,IAAK,EACLC,IAAK,EACLC,OAAQ,IAEZ,MAEJ,QACIX,MAAM,aAnFW,MAuFCY,mBAASlC,EAAO8B,SAvFjB,mBAuFlBK,EAvFkB,KAuFXC,EAvFW,KAwFrBC,EAASC,MAAMH,GAAO3F,KAAKuD,GAxFN,EAyFYmC,mBAASG,GAzFrB,mBAyFlBE,EAzFkB,KAyFLC,EAzFK,KA2FzBC,qBAAU,WACNJ,EAASC,MAAMtC,EAAO8B,SAAStF,KAAKuD,GACpCyC,EAAcH,GACdD,EAASpC,EAAO8B,WACjB,CAACF,IAGJ,IASMc,EAAa,WACXP,IAAUnC,EAAOgC,MAGrBI,EAASD,EAAQ,GACjBK,EAAc,GAAD,mBAAKD,GAAL,CAAkBxC,OAGnC,OACI,0BAASxC,UAAU,UAAnB,UACI,oBAAIA,UAAU,kBAAd,SAAiCsB,IACjC,qBAAKtB,UAAU,gBAAf,SACI,cAAC,IAAD,CACIwD,SAAUA,EACV4B,cAAe5C,EAEff,aAAc,CACVgC,QAAQ,EACR4B,YAAY,EACZhB,UAAU,GAPlB,SAUK,YAA+C,IAA7CiB,EAA4C,EAA5CA,aAAsBD,GAAsB,EAA9B5B,OAA8B,EAAtB4B,YAEfE,GAFqC,EAAV7B,KAEdhE,EAAW,CAC1B,wBAAwB,EACxB,gCAAiC2F,KAE/BG,EAAgB9F,EAAW,CAC7B,wBAAwB,EACxB,0BAA0B,EAC1B,kCAAmC2F,GAAcT,IAAUnC,EAAOgC,MAGtE,OACI,uBAAMzE,UAAU,OAAOwD,SAAU8B,EAAjC,UAEQ7C,GAAUA,EAAO8B,SAAW9B,EAAO+B,KAAO/B,EAAO8B,SAAW9B,EAAOgC,KACnE,qCAEQO,EAAYnC,KAAI,SAACC,EAAIG,GACjB,IAAMwC,EAAgB/F,EAAW,CAC7B,sBAAsB,EACtB,8BAA+B2F,GAAcT,IAAUnC,EAAO+B,MAGlE,OACI,sBAAiBxE,UAAU,cAA3B,UACI,cAAC,EAAD,CAAasD,QAAS,kBAzDpD,SAACzD,GACnB,GAAI+E,IAAUnC,EAAO+B,IAArB,CAGA,IAAMkB,EAAaV,EAAYW,QAAO,SAAC7C,EAAIG,GAAL,OAAeA,IAAUpD,KAC/DgF,EAASD,EAAQ,GACjBK,EAAcS,IAmD8DE,CAAc3C,IAC7BvC,KAAK,SACLV,UAAWyF,EACXpC,SAAUgC,GAAcT,IAAUnC,EAAO+B,MAGtD,cAAC,EAAD,CACIhC,kBAAmBA,EACnBC,OAAQA,EACRnB,QAASA,MAVP2B,MAiBtB,cAAC,EAAD,CACIK,QAAS6B,EACTnF,UAAWwF,EACX9E,KAAK,SACL2C,SAAUgC,EAJd,uBAOA,cAAC,EAAD,CAAerF,UAAWuF,EAAY7E,KAAK,SAC5B2C,SAAUgC,EADzB,oBAGA,cAAC,IAAD,UACK,gBAAE5B,EAAF,EAAEA,OAAF,OACG,qBAAKzD,UAAU,MAAf,SACMyD,GAAUA,EAAOnC,GACd0C,KAAKC,UAAUR,EAAOnC,GAAU,KAAM,GAEtC0C,KAAKC,UAAUR,EAAQ,KAAM,WASlDhB,IAAWA,EAAO8B,QAAU9B,EAAO+B,KAAO/B,EAAO8B,QAAU9B,EAAOgC,MAClE,wEACwChC,EAAO+B,IAD/C,0BACoE/B,EAAOgC,mB,OCtNlGoB,G,MAAO,SAAC,GAAD,IAAEjH,EAAF,EAAEA,MAAOC,EAAT,EAASA,QAAT,OAChB,qBAAKC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,6BAAlE,SACI,sBAAMC,EAAE,6aAA6aC,OAAQR,GAAS,UAAWS,cAAeR,GAAW,OAAQS,YAAY,MAAMC,iBAAiB,KAAKC,cAAc,QAAQC,eAAe,cCF3jBqG,EAAQ,SAAC,GAAD,IAAElH,EAAF,EAAEA,MAAOC,EAAT,EAASA,QAAT,OACjB,sBAAKC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,6BAAlE,UACI,sBAAMC,EAAE,2BAA2BC,OAAQR,GAAS,UAAWS,cAAeR,GAAW,OAAQS,YAAY,MAAMC,iBAAiB,KAAKC,cAAc,QAAQC,eAAe,UAC9K,sBAAMN,EAAE,wBAAwBC,OAAQR,GAAS,UAAWS,cAAeR,GAAW,OAAQS,YAAY,MAAMC,iBAAiB,KAAKC,cAAc,QAAQC,eAAe,UAC3K,sBAAMN,EAAE,yIAAyIC,OAAQR,GAAS,UAAWS,cAAeR,GAAW,OAAQS,YAAY,MAAMC,iBAAiB,KAAKC,cAAc,QAAQC,eAAe,UAC5R,sBAAMN,EAAE,oDAAoDC,OAAQR,GAAS,UAAWS,cAAeR,GAAW,OAAQS,YAAY,MAAMC,iBAAiB,KAAKC,cAAc,QAAQC,eAAe,cCClMsG,EAAS,WAAO,IAClB1B,EAAYC,cAAZD,SACP,OACI,sBAAKrE,UAAU,SAAf,UACI,eAAC,IAAD,CAASgG,gBAAgB,iBAAiBhG,UAAU,UAAUiG,GAAG,YAAjE,UACI,qBAAKjG,UAAU,gBAAf,SACI,cAAC,EAAD,CAAMpB,MAAkB,cAAXyF,EAAyB,UAAY,GAAKxF,QAAoB,cAAXwF,EAAyB,IAAM,OAEnG,qBAAKrE,UAAU,gBAAf,0BAEJ,eAAC,IAAD,CAASgG,gBAAgB,iBAAiBhG,UAAU,UAAUiG,GAAG,YAAjE,UACI,qBAAKjG,UAAU,gBAAf,SACI,cAAC,EAAD,CAAMpB,MAAkB,cAAXyF,EAAyB,UAAY,GAAKxF,QAAoB,cAAXwF,EAAyB,IAAM,OAEnG,qBAAKrE,UAAU,gBAAf,0BAEJ,eAAC,IAAD,CAASgG,gBAAgB,iBAAiBhG,UAAU,UAAUiG,GAAG,YAAjE,UACI,qBAAKjG,UAAU,gBAAf,SACI,cAAC,EAAD,CAAOpB,MAAkB,cAAXyF,EAAyB,UAAY,GAAKxF,QAAoB,cAAXwF,EAAyB,IAAM,OAEpG,qBAAKrE,UAAU,gBAAf,8BCFDkG,MApBf,WACE,OACE,sBAAKlG,UAAU,MAAf,UACI,cAAC,EAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOmG,KAAK,YAAYC,OAAK,EAA7B,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,YAAYC,OAAK,EAA7B,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,YAAYC,OAAK,EAA7B,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,OAAK,EAACD,KAAK,IAAIE,OAAQ,kBAAM,cAAC,IAAD,CAAUJ,GAAI,wBCT/CK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASV,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFW,SAASC,eAAe,SAM1BX,M","file":"static/js/main.71ff8be8.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const User = ({color, opacity}) =>(\r\n    <svg width=\"15\" height=\"17\" viewBox=\"0 0 15 17\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M7.41665 8.41667C5.599 8.41667 4.125 6.94267 4.125 5.12502V4.4667C4.125 2.64905 5.599 1.17505 7.41665 1.17505C9.23429 1.17505 10.7083 2.64905 10.7083 4.4667V5.12502C10.7083 6.94267 9.23429 8.41667 7.41665 8.41667Z\" stroke={color || \"#2D4379\"} strokeOpacity={opacity || \"0.48\"} strokeWidth=\"1.5\" strokeMiterlimit=\"10\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n        <path d=\"M14 14.2811C14 13.0961 13.2119 12.054 12.0684 11.7426C10.8215 11.4023 9.11911 11.05 7.41667 11.05C5.71423 11.05 4.01179 11.4023 2.76491 11.7426C1.62139 12.054 0.833374 13.0961 0.833374 14.2811V15.6584H14V14.2811Z\" stroke={color || \"#2D4379\"} strokeOpacity={opacity || \"0.48\"} strokeWidth=\"1.5\" strokeMiterlimit=\"10\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n    </svg>\r\n)\r\n\r\nUser.propTypes = {\r\n    color: PropTypes.string,\r\n    opacity: PropTypes.string,\r\n};\r\n","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport {User} from \"./User\";\r\nimport '../assets/styles/components/_section.scss';\r\n\r\nconst classNames = require('classnames');\r\n\r\nexport const Input = ({id, input, meta, className, placeholder, wrapperClassName, labelClass, title}) => {\r\n    const errorClass = classNames({\r\n        form__input_errorText: true,\r\n        form__input_errorText_first: id % 4 === 0 && !title.includes('general')\r\n    });\r\n    return (\r\n        <div className={wrapperClassName}>\r\n            <label className={labelClass}>{title.includes('general') ? title.slice(8) : title}</label>\r\n            <input id={id} type=\"text\" {...input} className={className} placeholder={placeholder}/>\r\n            {meta.error && meta.touched && <span className={errorClass}>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nUser.propTypes = {\r\n    id: PropTypes.number,\r\n    input: PropTypes.object,\r\n    meta: PropTypes.object,\r\n    className: PropTypes.string,\r\n    wrapperClassName: PropTypes.string,\r\n    labelClass: PropTypes.object,\r\n    placeholder: PropTypes.string,\r\n    color: PropTypes.string,\r\n    opacity: PropTypes.string,\r\n    title: PropTypes.string,\r\n\r\n};\r\n","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport {Input} from \"./Input\";\r\nimport {Field} from \"react-final-form\";\r\n\r\nconst classNames = require('classnames');\r\n\r\nconst required = value => (value ? null : '*');\r\n\r\nexport const FieldWrapper = ({id, title, isRequired, section}) => {\r\n\r\n    return (\r\n        <Field\r\n            name={`${section}.${title}`}\r\n            validate={isRequired && required}\r\n            subscription={{\r\n                value: true,\r\n                active: true,\r\n                error: true,\r\n                touched: true\r\n            }}\r\n        >\r\n            {({input, meta}) => {\r\n                const inputClass = classNames({\r\n                    form__input: true,\r\n                    form__input_active: meta.active,\r\n                    form__input_error: meta.error && meta.touched,\r\n                    form__input_first: id % 4 === 0 && !title.includes('general'),\r\n                    form__input_inline: true,\r\n                });\r\n                const labelClass = classNames({\r\n                    form__label: true,\r\n                    form__label_error: meta.error && meta.touched,\r\n                    form__label_active: meta.active,\r\n                });\r\n                const inlineIdsConfig = [2, 3, 6, 7, 10, 11];\r\n                const inputWrapperClass = classNames({\r\n                    form__inputWrapper: true,\r\n                    form__inputWrapper_inline: (inlineIdsConfig.includes(id))\r\n                });\r\n                return (\r\n                    <>\r\n                        <Input\r\n                            id={id}\r\n                            placeholder='placeholder'\r\n                            type='text'\r\n                            wrapperClassName={inputWrapperClass}\r\n                            className={inputClass}\r\n                            labelClass={labelClass}\r\n                            title={title}\r\n                            input={input}\r\n                            meta={meta}\r\n                        />\r\n                    </>\r\n                )\r\n            }}\r\n        </Field>\r\n    )\r\n}\r\n\r\nFieldWrapper.propTypes = {\r\n    id: PropTypes.number,\r\n    title: PropTypes.string,\r\n    isRequired: PropTypes.bool,\r\n    section: PropTypes.string,\r\n};\r\n","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport {FieldWrapper} from \"./FieldWrapper\";\r\n\r\n\r\nexport const Group = ({defaultGroupState, config, section}) => {\r\n\r\n    const titles = Object.keys(defaultGroupState[section]).map((el) => {\r\n        if (el === 'general') {\r\n            return Object.keys(defaultGroupState[section].general).map(el => `general.${el}`)\r\n        }\r\n        return `${el}`\r\n    }).flat();\r\n\r\n    return (\r\n        <>\r\n            {\r\n                titles.map((el, index) => {\r\n                    return (\r\n                        <FieldWrapper id={index} section={section} title={el} key={index}\r\n                                      isRequired={config.requiredFields && config.requiredFields.includes(el)}/>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nGroup.propTypes = {\r\n    defaultGroupState: PropTypes.object,\r\n    config: PropTypes.object,\r\n    section: PropTypes.string,\r\n};\r\n","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const PrimaryButton = ({children, type, disabled, className, onClick}) => (\r\n    <button type={type} disabled={disabled} className={className} onClick={onClick}>{children}</button>\r\n)\r\n\r\nPrimaryButton.propTypes = {\r\n    type: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    className: PropTypes.string,\r\n    onClick: PropTypes.func\r\n};\r\n","import React from 'react'\r\nimport '../assets/styles/components/_section.scss';\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const CloseButton = ({type, disabled, className, onClick}) => (\r\n    <button type={type} disabled={disabled} className={className} onClick={onClick}>\r\n        <span className='cross'/>\r\n    </button>\r\n)\r\n\r\nCloseButton.propTypes = {\r\n    type: PropTypes.string,\r\n    disabled: PropTypes.bool,\r\n    className: PropTypes.string,\r\n    onClick: PropTypes.func\r\n};\r\n","import React, {useEffect, useState} from 'react'\r\nimport '../assets/styles/components/_section.scss';\r\nimport {Form, FormSpy} from 'react-final-form';\r\nimport createDecorator from 'final-form-focus';\r\nimport {Group} from './Group';\r\nimport {useLocation} from 'react-router-dom';\r\nimport {PrimaryButton} from './PrimaryButton';\r\nimport {CloseButton} from './CloseButton';\r\n\r\nconst onSubmit = async (values, form) => {\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    alert(`These values ${JSON.stringify(values)} were submitted`);\r\n    setTimeout(form.reset);\r\n}\r\n\r\nconst focusOnError = createDecorator();\r\nconst classNames = require('classnames');\r\n\r\n\r\nexport const Section = () => {\r\n    const {pathname} = useLocation();\r\n    let defaultGroupState = null;\r\n    let config = null;\r\n    let section = null;\r\n\r\n    switch (pathname) {\r\n        case '/section1': {\r\n            section = 'Section 1';\r\n            defaultGroupState = {\r\n                [section]: {\r\n                    'title 1': '',\r\n                    general: {\r\n                        'title 2': '',\r\n                        'title 3': '',\r\n                        'title 4': '',\r\n                    }\r\n                }\r\n            };\r\n            config = {\r\n                current: 2,\r\n                min: 1,\r\n                max: 3,\r\n                fields: 4,\r\n                requiredFields: ['general.title 2', 'general.title 4']\r\n            }\r\n            break;\r\n        }\r\n        case '/section2': {\r\n            section = 'Section 2';\r\n            defaultGroupState = {\r\n                [section]: {\r\n                    'title 1': '',\r\n                    general: {\r\n                        'title 2': '',\r\n                        'title 3': '',\r\n                        'title 4': '',\r\n                    },\r\n                    'title 5': '',\r\n                    'title 6': '',\r\n                    'title 7': '',\r\n                    'title 8': '',\r\n                }\r\n\r\n            };\r\n            config = {\r\n                current: 2,\r\n                min: 2,\r\n                max: 4,\r\n                fields: 8,\r\n            }\r\n            break;\r\n        }\r\n        case '/section3': {\r\n            section = 'Section 3';\r\n            defaultGroupState = {\r\n                [section]: {\r\n                    'title 1': '',\r\n                    general: {\r\n                        'title 2': '',\r\n                        'title 3': '',\r\n                        'title 4': '',\r\n                    },\r\n                    'title 5': '',\r\n                    'title 6': '',\r\n                    'title 7': '',\r\n                    'title 8': '',\r\n                    'title 9': '',\r\n                    'title 10': '',\r\n                    'title 11': '',\r\n                    'title 12': '',\r\n                }\r\n\r\n            };\r\n            config = {\r\n                current: 2,\r\n                min: 2,\r\n                max: 4,\r\n                fields: 12,\r\n            }\r\n            break;\r\n        }\r\n        default:\r\n            alert('No groups');\r\n\r\n    }\r\n\r\n    const [count, setCount] = useState(config.current);\r\n    let groups = Array(count).fill(defaultGroupState);\r\n    const [groupsState, setGroupState] = useState(groups);\r\n\r\n    useEffect(() => {\r\n        groups = Array(config.current).fill(defaultGroupState);\r\n        setGroupState(groups)\r\n        setCount(config.current)\r\n    }, [pathname]);\r\n\r\n\r\n    const onRemoveGroup = (id) => {\r\n        if (count === config.min) {\r\n            return;\r\n        }\r\n        const restGroups = groupsState.filter((el, index) => index !== id);\r\n        setCount(count - 1)\r\n        setGroupState(restGroups)\r\n    }\r\n\r\n    const onAddGroup = () => {\r\n        if (count === config.max) {\r\n            return;\r\n        }\r\n        setCount(count + 1)\r\n        setGroupState([...groupsState, defaultGroupState])\r\n    }\r\n\r\n    return (\r\n        <section className='section'>\r\n            <h1 className='section__header'>{section}</h1>\r\n            <div className='section__body'>\r\n                <Form\r\n                    onSubmit={onSubmit}\r\n                    initialValues={defaultGroupState}\r\n                    // decorators={[focusOnError]}\r\n                    subscription={{\r\n                        values: true,\r\n                        submitting: true,\r\n                        pathname: true\r\n                    }}\r\n                >\r\n                    {({handleSubmit, values, submitting, form}) => {\r\n\r\n                        const primaryBtn = classNames({\r\n                            'form__primary-button': true,\r\n                            'form__primary-button_disabled': submitting,\r\n                        })\r\n                        const addGroupClass = classNames({\r\n                            'form__primary-button': true,\r\n                            'form__add-group-button': true,\r\n                            'form__add-group-button_disabled': submitting || count === config.max,\r\n                        });\r\n\r\n                        return (\r\n                            <form className='form' onSubmit={handleSubmit}>\r\n                                {\r\n                                    config && config.current >= config.min && config.current <= config.max &&\r\n                                    <>\r\n                                        {\r\n                                            groupsState.map((el, index) => {\r\n                                                const closeBtnClass = classNames({\r\n                                                    'form__close-button': true,\r\n                                                    'form__close-button_disabled': submitting || count === config.min,\r\n\r\n                                                });\r\n                                                return (\r\n                                                    <div key={index} className='form__group'>\r\n                                                        <CloseButton onClick={() => onRemoveGroup(index)}\r\n                                                                     type='button'\r\n                                                                     className={closeBtnClass}\r\n                                                                     disabled={submitting || count === config.min}\r\n\r\n                                                        />\r\n                                                        <Group\r\n                                                            defaultGroupState={defaultGroupState}\r\n                                                            config={config}\r\n                                                            section={section}\r\n                                                        />\r\n                                                    </div>\r\n                                                )\r\n                                            })\r\n                                        }\r\n\r\n                                        <PrimaryButton\r\n                                            onClick={onAddGroup}\r\n                                            className={addGroupClass}\r\n                                            type=\"button\"\r\n                                            disabled={submitting}\r\n                                        >Add\r\n                                            group</PrimaryButton>\r\n                                        <PrimaryButton className={primaryBtn} type='submit'\r\n                                                       disabled={submitting}>Submit</PrimaryButton>\r\n\r\n                                        <FormSpy>\r\n                                            {({values}) => (\r\n                                                <pre className='pre'>\r\n                                                     {values && values[section] ?\r\n                                                         JSON.stringify(values[section], null, 4)\r\n                                                         :\r\n                                                         JSON.stringify(values, null, 4)\r\n                                                     }\r\n                                                </pre>\r\n                                            )}\r\n                                        </FormSpy>\r\n                                    </>\r\n                                }\r\n\r\n                                {\r\n                                    config && (config.current < config.min || config.current > config.max) &&\r\n                                    <div>\r\n                                        {`Group count cannot be less than ${config.min} and more than ${config.max}`}\r\n                                    </div>\r\n                                }\r\n\r\n                            </form>\r\n                        )\r\n                    }}\r\n                </Form>\r\n\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const Bell = ({color, opacity}) =>(\r\n    <svg width=\"15\" height=\"17\" viewBox=\"0 0 15 17\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M9.48485 13.9319C9.48485 15.1039 8.58864 16.0001 7.41668 16.0001C6.24471 16.0001 5.3485 15.1039 5.3485 13.9319M12.2424 9.10619C12.2424 7.38271 12.2424 5.65923 12.2424 5.65923C12.2424 2.97061 10.1053 0.833496 7.41668 0.833496C4.72805 0.833496 2.59094 2.97061 2.59094 5.65923C2.59094 5.65923 2.59094 7.38271 2.59094 9.10619C2.59094 11.8638 1.21216 13.9319 1.21216 13.9319H13.6212C13.6212 13.9319 12.2424 11.8638 12.2424 9.10619Z\" stroke={color || \"#2D4379\"} strokeOpacity={opacity || \"0.48\"} strokeWidth=\"1.5\" strokeMiterlimit=\"10\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n    </svg>\r\n)\r\n\r\nBell.propTypes = {\r\n    color: PropTypes.string,\r\n    opacity: PropTypes.string,\r\n};\r\n","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const Notes = ({color, opacity}) =>(\r\n    <svg width=\"15\" height=\"18\" viewBox=\"0 0 15 18\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M4.15625 9.37036H10.4688\" stroke={color || \"#2D4379\"} strokeOpacity={opacity || \"0.48\"} strokeWidth=\"1.5\" strokeMiterlimit=\"10\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n        <path d=\"M4.15625 12.7H10.4688\" stroke={color || \"#2D4379\"} strokeOpacity={opacity || \"0.48\"} strokeWidth=\"1.5\" strokeMiterlimit=\"10\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n        <path d=\"M8.89063 3C8.89063 2.12835 8.18415 1.42188 7.3125 1.42188C6.44085 1.42188 5.73438 2.12835 5.73438 3H4.15625V5.10417H10.4688V3H8.89063Z\" stroke={color || \"#2D4379\"} strokeOpacity={opacity || \"0.48\"} strokeWidth=\"1.5\" strokeMiterlimit=\"10\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n        <path d=\"M12.5729 3.52612H13.625V17.2032H1V3.52612H2.05208\" stroke={color || \"#2D4379\"} strokeOpacity={opacity || \"0.48\"} strokeWidth=\"1.5\" strokeMiterlimit=\"10\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n    </svg>\r\n)\r\n\r\nNotes.propTypes = {\r\n    color: PropTypes.string,\r\n    opacity: PropTypes.string,\r\n};\r\n","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport '../assets/styles/components/_navbar.scss';\r\nimport { useLocation } from \"react-router-dom\";\r\nimport {User} from \"./User\";\r\nimport {Bell} from \"./Bell\";\r\nimport {Notes} from \"./Notes\";\r\n\r\n\r\nexport const Navbar = () => {\r\n    const {pathname} = useLocation();\r\n    return (\r\n        <nav className='navbar'>\r\n            <NavLink activeClassName='navLink_active' className='navLink' to='/section1'>\r\n                <div className='navLink__icon'>\r\n                    <User color={pathname==='/section1' ? '#0083FF' : '' } opacity={pathname==='/section1' ? '1' : '' } />\r\n                </div>\r\n                <div className='navLink__text'>Section 1</div>\r\n            </NavLink>\r\n            <NavLink activeClassName='navLink_active' className='navLink' to='/section2'>\r\n                <div className='navLink__icon'>\r\n                    <Bell color={pathname==='/section2' ? '#0083FF' : '' } opacity={pathname==='/section2' ? '1' : '' } />\r\n                </div>\r\n                <div className='navLink__text'>Section 2</div>\r\n            </NavLink>\r\n            <NavLink activeClassName='navLink_active' className='navLink' to='/section3'>\r\n                <div className='navLink__icon'>\r\n                    <Notes color={pathname==='/section3' ? '#0083FF' : '' } opacity={pathname==='/section3' ? '1' : '' } />\r\n                </div>\r\n                <div className='navLink__text'>Section 3</div>\r\n            </NavLink>\r\n        </nav>\r\n    )\r\n}\r\n","import React from 'react';\nimport {Switch, Route, Redirect} from 'react-router-dom';\nimport './App.scss';\nimport {Section} from './components/Section';\nimport {Navbar} from './components/Navbar';\n\n\nfunction App() {\n  return (\n    <div className='App'>\n        <Navbar />\n        <Switch>\n            <Route path='/section1' exact>\n                <Section />\n            </Route>\n            <Route path='/section2' exact>\n                <Section />\n            </Route>\n            <Route path='/section3' exact>\n                <Section />\n            </Route>\n            <Route exact path='/' render={() => <Redirect to={'/section1'}/>}/>\n        </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}